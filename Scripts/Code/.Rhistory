well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf',k),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window=5 #how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf'),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
?sprintf
?pdf
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window=5 #how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window=5 #how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window=5 #how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window=1 #how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+1)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+1)])~time[i:(i+1)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+1)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window= #how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window= 5#how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
View(dd)
View(dd)
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window= 5#how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[c(1:4, 13:17, 25:29, 37:41)]
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[c(A1:A4)]
dd = dd[c("A1":"A4")]
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[c("A1":"A4")]
dd = dd[,c("A1":"A4")]
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[1:4]
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[,1:4]
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[1:4,]
dd = dd[c(1:4, 13:17),]
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[c(1:4, 13:17),]
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window= 5#how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[c(1:4, 13:16, 25:28, 37:40),]
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window= 5#how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[c(1:4, 13:16, 25:28, 37:40),] # Subset to only wells with contents.
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
rm(list=ls())
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/") #this wd should only contain the growth csv
window= 5#how many time points to look at at one time
max.running.average=c() # after this calculate the average of all of the window, it takes the max, which is the max OD
max.slopes=c() #this calculates the slope of the of all of the window, it takes the max, which is the max slope- it wont include any negatives because it takes the max
well=c() #location well
plate.dir=c() #plate ID name from the dir
plate=c() #plate number
dd = read.csv("Control_curves_cleaned.csv",header=T,row.names=1)
dd = dd[c(1:4, 13:16, 25:28, 37:40),] # Subset to only wells with contents.
time = seq(from=0,to=ncol(dd),by=0.5) # edited code to hopefully reflect that reads are every hour for my protocol
time = time[1:ncol(dd)]
name = as.character(1)
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results/Control_Curves/") #you need to set this to a new wd for your graphs to go into, make sure your graphs dont go into the wd with the csv
pdf(sprintf('control_curve_%s.pdf', 1),paper='a4r')
for(j in 1:nrow(dd)){
#making the calculations
running.average=c()
average.time=c()
slopes=c()
for(i in 1:(ncol(dd)-window)){
running.average=c(running.average,median(as.numeric(dd[j,i:(i+5)])))
slopes=c(slopes,coef(lm(as.numeric(dd[j,i:(i+5)])~time[i:(i+5)]))[2])
average.time=c(average.time,mean(as.numeric(time[i:(i+5)])))
}
#makes the graph so you can check if it worked
plot(as.numeric(dd[j,])~time,type="l",xlab="",ylab="",axes=F,ylim=range(dd));box()
lines(running.average~average.time,col="red")
par(new=T)
plot(slopes~average.time,col="blue",type="l",ylab="",axes=F,ylim=c(-0.2,0.2));box()
#c the max values into vector
max.running.average=c(max.running.average,max(running.average))
max.slopes=c(max.slopes,max(slopes))
well=c(well, rownames(dd)[j])
plate=c(plate, name)
}
dev.off()
#switch back to the dir that contains the csv
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data/Control_Curves/dummy_wd/")
#bind all the data together to make a dataframe
growth.curve<-cbind(max.running.average,max.slopes, well, plate)
#write the csv file
write.csv(growth.curve, "growth_curve.csv")
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Code")
# Sam Welch
# A script that attempts to generate 3 96-well plates of stressor combinations from combinations generated in Data_Pipeline_Unique_ID. Early days.
# 5th June 2018
rm(list=ls())
library(tidyverse)
library(ggplot2)
vector_stressors <- c("1","2","3","4","5","6","7","8")
# Generate matrices of every 1-, 2-, 4-, and 8- combination of stressors.
matrix_combn_eight <- combn(vector_stressors,8)
matrix_combn_seven <- combn(vector_stressors,7)
matrix_combn_six <- combn(vector_stressors,6)
matrix_combn_five <- combn(vector_stressors,5)
matrix_combn_four <- combn(vector_stressors,4)
matrix_combn_three <- combn(vector_stressors,3)
matrix_combn_two <- combn(vector_stressors,2)
matrix_combn_one <- combn(vector_stressors,1)
# Turn matrices into vectors of strings of combinations
vector_combn_eight <- apply(matrix_combn_eight,2, paste, collapse="")
vector_combn_seven <- apply(matrix_combn_seven,2, paste, collapse="")
vector_combn_six <- apply(matrix_combn_six,2, paste, collapse="")
vector_combn_five <- apply(matrix_combn_five,2, paste, collapse="")
vector_combn_four <- apply(matrix_combn_four,2, paste, collapse="")
vector_combn_three <- apply(matrix_combn_three,2, paste, collapse="")
vector_combn_two <- apply(matrix_combn_two,2, paste, collapse="")
vector_combn_one <- apply(matrix_combn_one,2, paste, collapse="")
# Combine them into one vector of length 107
vector_combn <- c(vector_combn_one, vector_combn_two, vector_combn_three, vector_combn_four, vector_combn_five, vector_combn_six, vector_combn_seven, vector_combn_eight)
install.packages(c("ape", "bindrcpp", "dplyr", "highr", "lme4", "lmtest", "Matrix", "pillar", "plogr", "purrr", "Rcpp", "rlang", "rmarkdown", "sp", "stringi", "stringr", "utf8", "vegan", "yaml"))
# Sam Welch
# A script that attempts to generate 3 96-well plates of stressor combinations from combinations generated in Data_Pipeline_Unique_ID. Early days.
# 5th June 2018
rm(list=ls())
library(tidyverse)
library(ggplot2)
vector_stressors <- c("1","2","3","4","5","6","7","8")
# Generate matrices of every 1-, 2-, 4-, and 8- combination of stressors.
matrix_combn_eight <- combn(vector_stressors,8)
matrix_combn_seven <- combn(vector_stressors,7)
matrix_combn_six <- combn(vector_stressors,6)
matrix_combn_five <- combn(vector_stressors,5)
matrix_combn_four <- combn(vector_stressors,4)
matrix_combn_three <- combn(vector_stressors,3)
matrix_combn_two <- combn(vector_stressors,2)
matrix_combn_one <- combn(vector_stressors,1)
# Turn matrices into vectors of strings of combinations
vector_combn_eight <- apply(matrix_combn_eight,2, paste, collapse="")
vector_combn_seven <- apply(matrix_combn_seven,2, paste, collapse="")
vector_combn_six <- apply(matrix_combn_six,2, paste, collapse="")
vector_combn_five <- apply(matrix_combn_five,2, paste, collapse="")
vector_combn_four <- apply(matrix_combn_four,2, paste, collapse="")
vector_combn_three <- apply(matrix_combn_three,2, paste, collapse="")
vector_combn_two <- apply(matrix_combn_two,2, paste, collapse="")
vector_combn_one <- apply(matrix_combn_one,2, paste, collapse="")
# Combine them into one vector of length 107
vector_combn <- c(vector_combn_one, vector_combn_two, vector_combn_three, vector_combn_four, vector_combn_five, vector_combn_six, vector_combn_seven, vector_combn_eight)
