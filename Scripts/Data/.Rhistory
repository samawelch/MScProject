citation()
install.packages("tikzDevice")
library(tikzDevice)
options(tikzLatex = "C:/texlive/2018/bin/win32")
library(tikzDevice)
options(tikzLatex = "C:/texlive/2018/bin/win32")
tikz('figs/simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
getwd
getwd()
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
options(tikzLatex = "C:/texlive/2018/bin/win32/pdflatex.exe")
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
library(tikzDevice)
options(tikzDefaultEngine = 'xetex')
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
options(tikzDefaultEngine = 'xetex')
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
library(tikzDevice)
options(tikzDefaultEngine = 'luatex')
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
tinytex::install_tinytex()
tinytex:::is_tinytex()
library(tikzDevice)
options(tikzDefaultEngine = 'luatex')
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
library(tikzDevice)
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
tinytex::pdflatex('test.tex')
install.packages(c('tinytex', 'rmarkdown'))
tinytex::pdflatex('test.tex')
library(tikzDevice)
tinytex::pdflatex('test.tex')
tinytex:::is_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex(force = TRUE)
tinytex:::is_tinytex()
tinytex::pdflatex('test.tex')
library(tinytex)
parse_packages(pdflatex('test.tex'))
xelatex('test.tex')
lualatex('test.tex')
test.tex
lualatex('test.tex')
library(tinytex)
options(tinytex.verbose = TRUE)
1 + 1
pdflatex('test.tex')
plot(1)
dev.off()
library(tinytex)
options(tinytex.verbose = TRUE)
1 + 1
pdflatex('test.tex')
plot(1)
dev.off()
plot(1)
pdf("test,pdf")
dev.off()
dev.off()
pdf("test.pdf")
plot(1)
dev.off()
tinytex::latexmk("tmp.tex")
library(readxl)
library(tinytex)
options(tinytex.verbose = TRUE)
1 + 1
pdflatex('test.tex')
pdf("test.pdf")
plot(1)
dev.off()
library(tinytex)
options(tinytex.verbose = TRUE)
1 + 1
pdflatex('test.tex')
pdf("test.pdf")
plot(1)
dev.off()
uninstall_tinytex(force = TRUE)
tinytex:::is_tinytex()
library(tinytex)
options(tinytex.verbose = TRUE)
1 + 1
pdflatex('test.tex')
pdf("test.pdf")
plot(1)
dev.off()
install.packages(c("dbplyr", "growthcurver", "openssl", "rgdal", "scales", "tmap", "tmaptools", "XML", "yaml"))
R.version()
R.version
install.packages("tinytex")
library(tinytex)
tinytex:::is_tinytex()
tinytex:::install_tinytex()
tinytex:::is_tinytex()
tinytex:::detect_files()
tinytex:::auto_size()
library(tinytex)
pdflatex('test.tex')
tinytex:::texlive_root()
xfun::session_info('tinytex')
tlmgr_update()
library(tikzDevice)
tikz("test.uhh")
plot(1)
tinytex::latexmk()
tinytex::latexmk("cats.tex")
pdflatex('test.tex')
pdflatex('test.tex')
pdflatex('test.tex')
pdflatex('test.tex')
pdflatex('test.tex')
library(tinytex)
options(tinytex.verbose = TRUE)
1 + 1
pdflatex('test.tex')
pdflatex('test')
pdflatex('test.tex')
plot(1)
dev.off()
tinytex::pdflatex('test.tex')
?options
tinytex::pdflatex('test.tex')
library(tinytex)
tinytex::pdflatex('test.tex')
tinytex:::reinstall_tinytex()
install.packages("tinytex")
library(tinytex)
tinytex:::install_tinytex()
tinytex:::install_tinytex(force = TRUE)
tinytex:::is_tinytex()
tinytex::pdflatex('test.tex')
tinytex::pdflatex('test.tex')
plot(1)
dev.off()
options(tinytex)
tinytex:::parse_install()
tinytex:::parse_install("texput.txt")
gwtwd
getwd()
ls
ls()
parse_install("texput.log")
tinytex:::parse_install("texput.log")
tinytex:::win_app_dir()
tinytex::pdflatex('test.tex')
plot(1)
dev.off()
tinytex::pdflatex('test.tex')
plot(1)
dev.off()
tinytex::latexmk()
tinytex::latexmk("test.tex")
list.files('~/bin')
devtools::install_github('rstudio/rmarkdown')
install.packages("devtools")
install.packages("devtools")
devtools::install_github('rstudio/rmarkdown')
devtools::install_github('yihui/tinytex')
tinytex:::reinstall_tinytex()
R.Version()
tinytex::pdflatex('test.tex')
plot(1)
dev.off()
tinytex:::reinstall_tinytex()
tinytex:::install_tinytex()
tinytex:::is_tinytex()
tinytex::pdflatex('test.tex')
plot(1)
dev.off()
tinytex::pdflatex('test.tex')
tinytex::pdflatex('test.tex')
tempdir()
tempdir()
library(tinytex)
uninstall_tinytex()
# Generate a graphic to depict extended definitions of stressor interactions
# Based on Figure 2 of Piggott, Townsend and Mathaei (2015)
# TODO: Refine these graphics more, whether that means bringing them in line with PGM(2015) or modifying them...
library(dplyr)
library(tibble)
library(tidyr)
library(ggplot2)
library(growthcurver)
library(gridBase)
library(gridExtra)
library(ggpubr)
interaction_order_vector <- c("A", "B", "Additive", "+ Synergy", "- Synergy", "+ Antagonism", "- Antagonism" )
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Data")
data <- read.csv("Expanded_Interaction_Definition_Data.csv")
p1 <- ggplot(data = filter(data, Example == 1), aes(x = Interaction, y = Value)) +
geom_col(width = 0.7, fill = "#F8766D") +
ylab(label = "Response") +
scale_x_discrete(limits = interaction_order_vector) +
scale_y_continuous(expand = c(0,0), limits = c(-5,5)) +
geom_text(aes(label = Value), vjust = -0.5) +
ggtitle(label = "Double Negative Stressor Interactions", subtitle = "Example: Antibacterial x Antibacterial") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 315))
p2 <- ggplot(data = filter(data, Example == 2), aes(x = Interaction, y = Value)) +
geom_col(width = 0.7, fill = "#C49A00") +
ylab(label = "Response") +
scale_x_discrete(limits = interaction_order_vector) +
scale_y_continuous(expand = c(0,0), limits = c(-5,5)) +
geom_text(aes(label = Value), vjust = -0.5) +
ggtitle(label = "Opposing Stressor Interactions", subtitle = "Example: Antibacterial x Food Source") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 315))
p3 <- ggplot(data = filter(data, Example == 3), aes(x = Interaction, y = Value)) +
geom_col(width = 0.7, fill = "#00BA38") +
ylab(label = "Response") +
scale_x_discrete(limits = interaction_order_vector) +
scale_y_continuous(expand = c(0,0), limits = c(-5,5)) +
geom_text(aes(label = Value), vjust = -0.5) +
ggtitle(label = "Double Positive Stressor Interactions", subtitle = "Example: Food Source x Food Source") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 315))
p4 <- ggplot(data = filter(data, Example == 4), aes(x = Interaction, y = Value)) +
geom_col(width = 0.7, fill = "purple") +
ylab(label = "Response") +
scale_x_discrete(limits = c("A", "B", "C", "Additive", "+ Synergy", "- Synergy", "+ Antagonism", "- Antagonism" )) +
scale_y_continuous(expand = c(0,0), limits = c(-5,5)) +
geom_text(aes(label = Value), vjust = -0.5) +
ggtitle(label = "Triple Opposing", subtitle = "Example: Food x Food x AB") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 315))
p5 <- ggplot(data = filter(data, Example == 5), aes(x = Interaction, y = Value)) +
geom_col(width = 0.7, fill = "orange") +
ylab(label = "Response") +
scale_x_discrete(limits = c("A", "B", "C", "D", "Additive", "+ Synergy", "- Synergy", "+ Antagonism", "- Antagonism" )) +
scale_y_continuous(expand = c(0,0), limits = c(-5,5)) +
geom_text(aes(label = Value), vjust = -0.5) +
ggtitle(label = "Quad Opposing", subtitle = "Example: Food x Food x AB x AB") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 315))
p6 <- ggplot(data = filter(data, Example == 6), aes(x = Interaction, y = Value)) +
geom_col(width = 0.7, fill = "skyblue") +
ylab(label = "Response") +
scale_x_discrete(limits = c("A", "B", "C", "D","E","F","G","H", "Additive", "+ Synergy", "- Synergy", "+ Antagonism", "- Antagonism" )) +
scale_y_continuous(expand = c(0,0), limits = c(-6,6)) +
geom_text(aes(label = Value), vjust = -0.5) +
ggtitle(label = "Octo Opposing", subtitle = "???") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 315))
setwd("C:/Users/Sam Welch/Google Drive/ICL Ecological Applications/Project/Work/Scripts/Results")
pdf("Plot_Interactions_Illustrative.pdf", height = 16, width = 24)
ggarrange(p1,p2,p3,p4,p5,p6, ncol = 3, nrow = 2)
dev.off()
library(here)
setwd(here("Scripts"))
#######################
### Shorok's Script ###
#######################
rm(list=ls())
set.seed(1234)
setwd(here("Data"))
library(sciplot)
library(vegan)
dd<-read.csv("growth_curves_conc.csv", header=T)
dd<-subset(dd, dd$stressor!="Control")
dd<-droplevels(dd)
plot(log(dd$max.running.average)~log(dd$actual.concentration..mg.ml.))
#-3, 0
layout(matrix(1:9, ncol=3))
for( i in 1:nlevels(dd$stressor)){
temp<-subset(dd, dd$stressor==unique(dd$stressor)[i])
temp<-droplevels(temp)
plot(log(temp$max.running.average)~log(temp$actual.concentration..mg.ml.), pch=16, type="n", main=paste(temp$stressor[1]), ylab="Log(Max OD)", xlab="Log(Conc; mg/ml)", ylim=c(-3.5, 0))
for( j in 1:nlevels(temp$Species)){
points(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]]), pch=16, col=j)
abline(lm(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]])), col=j)
}}
plot(temp$max.running.average~log(temp$actual.concentration..mg.ml.), type="n", ylab="", xlab="", ylim=c(0, 1), xaxt="n", yaxt="n", bty="n")
legend(y=1.5, x=(-8), pch=16, legend=levels(dd$Species), bty="n", col=1:7, y.intersp = 0.2, x.intersp = 0.2, cex=0.8, ncol=2)
#######################
### Shorok's Script ###
#######################
library(sciplot)
library(vegan)
library(here)
rm(list=ls())
set.seed(1234)
setwd(here("Data"))
dd<-read.csv("growth_curves_conc.csv", header=T)
dd<-subset(dd, dd$stressor!="Control")
dd<-droplevels(dd)
plot(log(dd$max.running.average)~log(dd$actual.concentration..mg.ml.))
#-3, 0
layout(matrix(1:9, ncol=3))
for( i in 1:nlevels(dd$stressor)){
temp<-subset(dd, dd$stressor==unique(dd$stressor)[i])
temp<-droplevels(temp)
plot(log(temp$max.running.average)~log(temp$actual.concentration..mg.ml.), pch=16, type="n", main=paste(temp$stressor[1]), ylab="Log(Max OD)", xlab="Log(Conc; mg/ml)", ylim=c(-3.5, 0))
for( j in 1:nlevels(temp$Species)){
points(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]]), pch=16, col=j)
abline(lm(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]])), col=j)
}}
plot(temp$max.running.average~log(temp$actual.concentration..mg.ml.), type="n", ylab="", xlab="", ylim=c(0, 1), xaxt="n", yaxt="n", bty="n")
legend(y=1.5, x=(-8), pch=16, legend=levels(dd$Species), bty="n", col=1:7, y.intersp = 0.2, x.intersp = 0.2, cex=0.8, ncol=2)
setwd(here("Data"))
library(here)
#######################
### Shorok's Script ###
#######################
library(sciplot)
library(vegan)
library(here)
rm(list=ls())
set.seed(1234)
setwd(here("Scripts","Data"))
dd<-read.csv("growth_curves_conc.csv", header=T)
dd<-subset(dd, dd$stressor!="Control")
dd<-droplevels(dd)
plot(log(dd$max.running.average)~log(dd$actual.concentration..mg.ml.))
#-3, 0
layout(matrix(1:9, ncol=3))
for( i in 1:nlevels(dd$stressor)){
temp<-subset(dd, dd$stressor==unique(dd$stressor)[i])
temp<-droplevels(temp)
plot(log(temp$max.running.average)~log(temp$actual.concentration..mg.ml.), pch=16, type="n", main=paste(temp$stressor[1]), ylab="Log(Max OD)", xlab="Log(Conc; mg/ml)", ylim=c(-3.5, 0))
for( j in 1:nlevels(temp$Species)){
points(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]]), pch=16, col=j)
abline(lm(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]])), col=j)
}}
plot(temp$max.running.average~log(temp$actual.concentration..mg.ml.), type="n", ylab="", xlab="", ylim=c(0, 1), xaxt="n", yaxt="n", bty="n")
legend(y=1.5, x=(-8), pch=16, legend=levels(dd$Species), bty="n", col=1:7, y.intersp = 0.2, x.intersp = 0.2, cex=0.8, ncol=2)
setwd(here("Scripts","Data"))
here("Scripts","Data")
#######################
### Shorok's Script ###
#######################
library(sciplot)
library(vegan)
library(here)
rm(list=ls())
set.seed(1234)
setwd(here("MScProject","Scripts","Data"))
dd<-read.csv("growth_curves_conc.csv", header=T)
dd<-subset(dd, dd$stressor!="Control")
dd<-droplevels(dd)
plot(log(dd$max.running.average)~log(dd$actual.concentration..mg.ml.))
#-3, 0
layout(matrix(1:9, ncol=3))
for( i in 1:nlevels(dd$stressor)){
temp<-subset(dd, dd$stressor==unique(dd$stressor)[i])
temp<-droplevels(temp)
plot(log(temp$max.running.average)~log(temp$actual.concentration..mg.ml.), pch=16, type="n", main=paste(temp$stressor[1]), ylab="Log(Max OD)", xlab="Log(Conc; mg/ml)", ylim=c(-3.5, 0))
for( j in 1:nlevels(temp$Species)){
points(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]]), pch=16, col=j)
abline(lm(log(temp$max.running.average[temp$Species==unique(temp$Species)[j]])~log(temp$actual.concentration..mg.ml.[temp$Species==unique(temp$Species)[j]])), col=j)
}}
plot(temp$max.running.average~log(temp$actual.concentration..mg.ml.), type="n", ylab="", xlab="", ylim=c(0, 1), xaxt="n", yaxt="n", bty="n")
legend(y=1.5, x=(-8), pch=16, legend=levels(dd$Species), bty="n", col=1:7, y.intersp = 0.2, x.intersp = 0.2, cex=0.8, ncol=2)
